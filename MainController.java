package com.miranda.car;

import com.google.gson.Gson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/miranda") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CarRepository carRepository;

    @PostMapping(path="/addcar") // Map ONLY POST Requests
    public @ResponseBody String addNewCar (
            @RequestParam String make,
            @RequestParam String model,
            @RequestParam String body,
            @RequestParam String transmission,
            @RequestParam String color,
            @RequestParam Double price) {

        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Car c = new Car();
        c.setMake(make);
        c.setModel(model);
        c.setBody(body);
        c.setTransmission(transmission);
        c.setColor(color);
        c.setPrice(price);


        String response;
        try{
            carRepository.save(c);
            response = "Success";
        }catch (Exception e){
        response = "Error" + e.getMessage();
    }
        return  response;
    }
    @GetMapping(path="/getcars")
    public @ResponseBody Iterable<Car> getAllCars() {
        // This returns a JSON or XML with the users
        return carRepository.findAll();
    }

    @GetMapping(path="/getcar2")
    public @ResponseBody String getCarById(@RequestParam Integer id) {
        // This returns a JSON or XML with the users
        try {
            Optional<Car> c = carRepository.findById(id);
            Gson gson = new Gson();
            return gson.toJson(c.get());
        } catch (IllegalArgumentException e) {
            return "ID is null";
        } catch (NoSuchElementException e) {
            return "ID does not exist";
        } catch (Exception e) {
            return e.getMessage() + " " + e.getStackTrace();
        }
    }

    @GetMapping(path="/getcarsbymake")
    public @ResponseBody String getCarsByMake(@RequestParam String make) {
        // This returns a JSON or XML with the users
        String response;
        try {
            Iterable<Car> cars = carRepository.findAll();

            ArrayList<Car> output = new ArrayList<>();
            for (Car c : cars) {
                if (c.getMake().equals(make)) {
                    output.add(c);
                }
            }
            Gson gson = new Gson();
            return gson.toJson(output);
        }catch (Exception e){
            response = "Error" + e.getMessage();
        } return response;
    }
    @GetMapping(path="/getcars2")
    public @ResponseBody String getCars() {
        // This returns a JSON or XML with the users
    String response;
    try{
        Iterable<Car> cars = carRepository.findAll();
        Gson gson = new Gson();
        return gson.toJson(cars);
    }catch (Exception e){
        response = "Error" + e.getMessage();
    }
        return response;
    }

    @DeleteMapping(path="/deletecarsbymake")
    public @ResponseBody String deleteCarsByMake(@RequestParam String make) {
        // This returns a JSON or XML with the users
        String response;
        try{
        Iterable<Car> cars = carRepository.findAll();
        for (Car c : cars) {
            if (c.getMake().equals(make)) {
                carRepository.deleteById(c.getId());
            }
        }
            Gson gson = new Gson();
            response = gson.toJson(cars);

        }catch (Exception e){
            response = "Error" + e.getMessage();
        }
        return response;
    }
    @DeleteMapping(path="/deletecar") // Map ONLY POST Requests
    public @ResponseBody String deleteCar (@RequestParam Integer id) {
        carRepository.deleteById(id);
        return "Deleted";
    }
    @PutMapping(path= "/edit")
    public @ResponseBody String editById (
           @RequestParam Integer id,
           @RequestParam String make,
           @RequestParam String model,
           @RequestParam String body,
           @RequestParam String transmission,
           @RequestParam String color,
           @RequestParam Double price) {

        String response;
        try{
            Optional<Car> oc;
            oc = carRepository.findById(id);
            Car c = oc.get();
            c.setMake(make);
            c.setModel(model);
            c.setBody(body);
            c.setTransmission(transmission);
            c.setColor(color);
            c.setPrice(price);
            carRepository.save(c);
            response ="Sucess";
        }  catch (Exception e) {
            response = "Error" + e.getMessage();
        }
        return response;
    }
}